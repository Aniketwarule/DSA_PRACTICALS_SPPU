#include<iostream>
#include <stack>

using namespace std;

struct Node{
    char data;
    Node* next;
};
Node*  createNode(char data)
{
 Node* newnode=new Node;
 newnode->data=data;
 newnode->next=NULL;
 return newnode;

}
void push(Node* & top,char value)
{
   Node* temp = createNode(value);
   temp -> next =top ;
   top =temp ;

            }
char pop(Node* & top)
{

    Node* temp = top;   
    char poppedData = top -> data;  
    top = top -> next;
    delete temp;
    return poppedData;
    
}
bool isEmpty( const Node * top)
{
    return top ==nullptr;
}

int precedence(char op)
{
     if(op=='+'||op=='-')
     {
        return 1;
     }
     else if(op=='*'||op=='/')
     {
        return 2;
        }
}
string infixToPostfix(const string  infixExpression)
{
    string postfix="";
    Node* stack=nullptr;

    for(char token :infixExpression)
    {
        if(isalpha(token))
        {
            postfix+=token;
        }
        else if (token=='(')
        {
            push(stack,token);
        }
        else if (token==')')
        {
        while ( stack->data != '(') {
                postfix += pop(stack);
            }
            if (!isEmpty(stack) && stack->data == '(') {
                pop(stack); // Pop and discard '('
            }
        } else {
            while (!isEmpty(stack) && precedence(token) <= precedence(stack->data)) {
                postfix += pop(stack);
            }
            push(stack, token);
        }
    }

    while (!isEmpty(stack)) {
        postfix += pop(stack);
    }

    return postfix;
}
int evaluatePostfix(const string postfixExpression) {
    stack<int> stack;

    for (char token : postfixExpression) {
        if (isdigit(token)) {
            stack.push(token - '0'); // Convert character to integer
        } else {
            int operand2 = stack.top();
            stack.pop();
            int operand1 = stack.top();
            stack.pop();
            int result;

            switch (token) {
                case '+':
                    result = operand1 + operand2;
                    break;
                case '-':
                    result = operand1 - operand2;
                    break;
                case '*':
                    result = operand1 * operand2;
                    break;
                case '/':
                    result = operand1 / operand2;
                    break;
            }
            stack.push(result);
        }
    }

    return stack.top();
}

int main() {

    cout<<"Enter The InfixExpression"<<endl;
    string infixExpression;
    cin>>infixExpression;
    string postfixExpression = infixToPostfix(infixExpression);
    int result = evaluatePostfix(postfixExpression);

    cout << "Infix Expression: " << infixExpression <<endl;
    cout << "Postfix Expression: " << postfixExpression <<endl;
    cout << "Result: " << result << endl;
    
    return 0;
}



//// Q4/////////////

#include<iostream>
#include <stack>

using namespace std;

struct Node{
    char data;
    Node* next;
};
Node*  createNode(char data)
{
 Node* newnode=new Node;
 newnode->data=data;
 newnode->next=NULL;
 return newnode;

}
void push(Node* & top,char value)
{
   Node* temp = createNode(value);
   temp -> next =top ;
   top =temp ;

            }
char pop(Node* & top)
{

    Node* temp = top;   
    char poppedData = top -> data;  
    top = top -> next;
    delete temp;
    return poppedData;
    
}
bool isEmpty( const Node * top)
{
    return top ==nullptr;
}

int precedence(char op)
{
     if(op=='+'||op=='-')
     {
        return 1;
     }
     else if(op=='*'||op=='/')
     {
        return 2;
        }
}

string infixToPrefix(const string infixExpression) {
    string prefixExpression;
    stack<char> operatorStack;

    for (int i = infixExpression.length() - 1; i >= 0; i--) {
        char token = infixExpression[i];

        if (isalnum(token)) {
            prefixExpression = token + prefixExpression;
        } else if (token == ')') {
            operatorStack.push(token);
        } else if (token == '(') {
            while (!operatorStack.empty() && operatorStack.top() != ')') {
                prefixExpression = operatorStack.top() + prefixExpression;
                operatorStack.pop();
            }
           
        } else {
            while (!operatorStack.empty() && operatorStack.top() != ')' && precedence(token) <= precedence(operatorStack.top())) {
                prefixExpression = operatorStack.top() + prefixExpression;
                operatorStack.pop();
            }
            operatorStack.push(token);
        }
    }

    while (!operatorStack.empty()) {
        prefixExpression = operatorStack.top() + prefixExpression;
        operatorStack.pop();
    }

    return prefixExpression;
}

int evaluatePrefix(const string prefixExpression) {
    stack<int> operandStack;

    for (int i = prefixExpression.length() - 1; i >= 0; i--) {
        char token = prefixExpression[i];

        if (isalnum(token)) {
            operandStack.push(token - '0'); // Convert character to integer
        } else {
            int operand1 = operandStack.top();
            operandStack.pop();
            int operand2 = operandStack.top();
            operandStack.pop();
            int result;

            switch (token) {
                case '+':
                    result = operand1 + operand2;
                    break;
                case '-':
                    result = operand1 - operand2;
                    break;
                case '*':
                    result = operand1 * operand2;
                    break;
                case '/':
                    if (operand2 == 0) {
                        cerr << "Division by zero!" << endl;
                        exit(1);
                    }
                    result = operand1 / operand2;
                    break;
                default:
                    cerr << "Invalid operator: " << token << endl;
                    exit(1);
            }
            operandStack.push(result);
        }
    }

    if (operandStack.size() != 1) {
        cerr << "Invalid prefix expression" << endl;
        exit(1);
    }

    return operandStack.top();
}


int main() {

    cout<<"Enter The InfixExpression"<<endl;
    string infixExpression;
    cin>>infixExpression;
    string prefixExpression = infixToPrefix(infixExpression);
   int prefixResult = evaluatePrefix(prefixExpression);

    cout << "Infix Expression: " << infixExpression <<endl;
    cout << "Prefix Expression: " << prefixExpression <<endl;
    cout << "Result: " << prefixResult << endl;
    



    return 0;
   
}