#include <iostream>
using namespace std;

// Structure for a tree node
struct Node {
    int data;
    Node* left;
    Node* right;
    Node(int value) : data(value), left(nullptr), right(nullptr) {}
};

// Class for Binary Search Tree operations
class BinarySearchTree {
private:
    Node* root;

    Node* insertRecursive(Node* root, int value) {
        if (root == nullptr) {
            root = new Node(value);
            return root;
        }

        if (value < root->data)
            root->left = insertRecursive(root->left, value);
        else if (value > root->data)
            root->right = insertRecursive(root->right, value);
        else
            cout << "Duplicate value: " << value << " cannot be inserted!\n";

        return root;
    }

    Node* findMinNode(Node* root) {
        while (root->left != nullptr)
            root = root->left;
        return root;
    }

    Node* deleteNode(Node* root, int value) {
        if (root == nullptr)
            return root;

        if (value < root->data)
            root->left = deleteNode(root->left, value);
        else if (value > root->data)
            root->right = deleteNode(root->right, value);
        else {
            if (root->left == nullptr) {
                Node* temp = root->right;
                delete root;
                return temp;
            } else if (root->right == nullptr) {
                Node* temp = root->left;
                delete root;
                return temp;
            }

            Node* temp = findMinNode(root->right);
            root->data = temp->data;
            root->right = deleteNode(root->right, temp->data);
        }
        return root;
    }

    Node* searchNode(Node* root, int value) {
        if (root == nullptr || root->data == value)
            return root;

        if (value < root->data)
            return searchNode(root->left, value);

        return searchNode(root->right, value);
    }

    void displayInOrder(Node* root) {
        if (root != nullptr) {
            displayInOrder(root->left);
            cout << root->data << " ";
            displayInOrder(root->right);
        }
    }

    int findDepth(Node* root) {
        if (root == nullptr)
            return 0;

        int leftDepth = findDepth(root->left);
        int rightDepth = findDepth(root->right);

        return max(leftDepth, rightDepth) + 1;
    }

public:
    BinarySearchTree() : root(nullptr) {}

    void insert(int value) {
        root = insertRecursive(root, value);
    }

    void remove(int value) {
        root = deleteNode(root, value);
    }

    bool search(int value) {
        Node* result = searchNode(root, value);
        return result != nullptr;
    }

    void displayTree() {
        if (root == nullptr) {
            cout << "Tree is empty.\n";
            return;
        }
        cout << "Binary Search Tree (In-order traversal): ";
        displayInOrder(root);
        cout << endl;
    }

    int depthOfTree() {
        return findDepth(root);
    }
};

int main() {
    BinarySearchTree bst;

    int choice, value;
    do {
        cout << "\nBinary Search Tree Operations:\n"
             << "1. Insert\n"
             << "2. Delete\n"
             << "3. Search\n"
             << "4. Display Tree\n"
             << "5. Display Depth of Tree\n"
             << "6. Exit\n"
             << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter value to insert: ";
                cin >> value;
                bst.insert(value);
                break;

            case 2:
                cout << "Enter value to delete: ";
                cin >> value;
                bst.remove(value);
                break;

            case 3:
                cout << "Enter value to search: ";
                cin >> value;
                if (bst.search(value))
                    cout << "Value " << value << " is present in the tree.\n";
                else
                    cout << "Value " << value << " is not found in the tree.\n";
                break;

            case 4:
                bst.displayTree();
                break;

            case 5:
                cout << "Depth of the tree is: " << bst.depthOfTree() << endl;
                break;

            case 6:
                cout << "Exiting the program...\n";
                break;

            default:
                cout << "Invalid choice! Please enter a valid option.\n";
        }
    } while (choice != 6);

    return 0;
}
