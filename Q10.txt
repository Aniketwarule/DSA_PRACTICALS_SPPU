#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* left;
    Node* right;
    bool isThreaded;

    Node(int value) {
        data = value;
        left = right = nullptr;
        isThreaded = false;
    }
};

class ThreadedBinaryTree {
private:
    Node* root;

    Node* createThreaded(Node* root, Node*& prev) {
        if (root == nullptr)
            return nullptr;

        Node* temp = createThreaded(root->left, prev);

        if (temp == nullptr) {
            root->left = prev;
            root->isThreaded = true;
        }

        if (prev != nullptr && prev->right == nullptr) {
            prev->right = root;
            prev->isThreaded = true;
        }

        prev = root;

        createThreaded(root->right, prev);

        return root;
    }

public:
    ThreadedBinaryTree() : root(nullptr) {}

    void insert(int value) {
        Node* newNode = new Node(value);

        if (root == nullptr) {
            root = newNode;
            return;
        }

        Node* current = root;
        Node* parent = nullptr;

        while (current != nullptr) {
            parent = current;
            if (value < current->data) {
                if (!current->isThreaded)
                    current = current->left;
                else
                    break;
            } else {
                if (current->isThreaded)
                    break;
                current = current->right;
            }
        }

        if (value < parent->data) {
            newNode->left = parent->left;
            parent->left = newNode;
            parent->isThreaded = false;
            newNode->right = parent;
        } else {
            newNode->right = parent->right;
            parent->right = newNode;
            newNode->isThreaded = true;
        }
    }

    void createThreaded() {
        Node* prev = nullptr;
        root = createThreaded(root, prev);
    }

    void inorder() {
        if (root == nullptr) {
            cout << "Tree is empty." << endl;
            return;
        }

        Node* current = root;

        while (current != nullptr) {
            while (current->left != nullptr && !current->isThreaded)
                current = current->left;

            cout << current->data << " ";

            if (current->isThreaded)
                current = current->right;
            else
                break;
        }
        cout << endl;
    }

    void preorder() {
        if (root == nullptr) {
            cout << "Tree is empty." << endl;
            return;
        }

        Node* current = root;

        while (current != nullptr) {
            cout << current->data << " ";

            if (current->left != nullptr && !current->isThreaded)
                current = current->left;
            else if (current->isThreaded)
                current = current->right;
            else
                break;
        }
        cout << endl;
    }
};

int main() {
    ThreadedBinaryTree tree;
    int choice, value;

    do {
        cout << "\nThreaded Binary Tree Operations:\n"
             << "1. Insert\n"
             << "2. Create Threaded Tree\n"
             << "3. In-order Traversal\n"
             << "4. Pre-order Traversal\n"
             << "5. Exit\n"
             << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter value to insert: ";
                cin >> value;
                tree.insert(value);
                break;

            case 2:
                tree.createThreaded();
                cout << "Threaded tree created." << endl;
                break;

            case 3:
                cout << "In-order traversal: ";
                tree.inorder();
                break;

            case 4:
                cout << "Pre-order traversal: ";
                tree.preorder();
                break;

            case 5:
                cout << "Exiting the program...\n";
                break;

            default:
                cout << "Invalid choice! Please enter a valid option.\n";
        }
    } while (choice != 5);

    return 0;
}
